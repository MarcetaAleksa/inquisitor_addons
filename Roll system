-- WoW Addon Script for Handling Rolls and Combat Logic

-- Table to handle combat logic and rolls

-- Function to select a target from available raid markers
function CombatHandler:SelectTarget(targetMarker)
    local availableMarkers = {
        ["Star"] = "Star",
        ["Circle"] = "Circle",
        ["Diamond"] = "Diamond",
        ["Triangle"] = "Triangle",
        ["Moon"] = "Moon",
        ["Square"] = "Square",
        ["Cross"] = "Cross",
        ["Skull"] = "Skull"
    }

    if availableMarkers[targetMarker] then
        characterSheet.selectedTarget = availableMarkers[targetMarker]
        print("Target selected: " .. availableMarkers[targetMarker])

        -- Display raid marker for the selected target
        local raidMarker = availableMarkers[targetMarker]
        if raidMarker then
            print("Displaying raid marker: " .. raidMarker)
            -- Assuming there's a function to display raid markers in the WoW API
            -- Replace the following with the actual WoW API call if available
            SetRaidTarget("target", raidMarker)
        end
    else
        print("Invalid target marker selected.")
    end
end
end
local CombatHandler = {}

-- Function to perform a melee attack roll
function CombatHandler:PerformMeleeAttack(characterSheet)
    local target = characterSheet.selectedTarget or "Unknown Target"
    local roll = math.random(1, 100) + characterSheet.offensiveAbilities.meleeCombat
    local weaponDamage = 0

    -- Determine weapon damage and bonuses based on selected weapon type
    if characterSheet.weaponType == "Unarmed" then
        weaponDamage = 6  -- D6 for unarmed
    elseif characterSheet.weaponType == "Single One-Handed" then
        weaponDamage = 8  -- D8 for single one-handed
        roll = roll + 5  -- +5 to hit bonus
    elseif characterSheet.weaponType == "Double One-Handed" then
        weaponDamage = 8  -- D8 for double one-handed
        weaponDamage = weaponDamage + 2  -- +2 damage bonus
    elseif characterSheet.weaponType == "Single One-Handed + Shield" then
        weaponDamage = 8  -- D8 for single one-handed with shield
    elseif characterSheet.weaponType == "Two-Handed" then
        weaponDamage = 10  -- D10 for two-handed
        weaponDamage = weaponDamage + 2  -- +2 damage bonus for double-handed
    end

    local totalDamage = math.random(1, weaponDamage) + characterSheet.offensiveAbilities.meleeCombat
    local isCritical = roll >= 95
    if isCritical then
        print("Melee Attack Roll on " .. target .. ": " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Melee Attack Roll on " .. target .. ": " .. roll .. " (Damage: " .. totalDamage .. ")")
    end
    return roll, totalDamage
end

    local totalDamage = math.random(1, weaponDamage) + characterSheet.offensiveAbilities.meleeCombat
    local isCritical = roll >= 95
    if isCritical then
        print("Melee Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Melee Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end
    return roll, totalDamage
end

    local totalDamage = math.random(1, weaponDamage) + characterSheet.offensiveAbilities.meleeCombat
    local isCritical = roll >= 95
    if isCritical then
        print("Melee Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Melee Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end
    return roll, totalDamage
end

-- Function to perform a magic attack roll
function CombatHandler:PerformMagicAttack(characterSheet)
    local target = characterSheet.selectedTarget or "Unknown Target"
    local roll = math.random(1, 100) + characterSheet.offensiveAbilities.battleMagic
    local spellTurn = characterSheet.activeSpells.turn or 1
    local weaponDamage = 0

    -- Determine damage and effects based on the number of turns the spell has been active
    if spellTurn == 1 then
        weaponDamage = math.random(1, 10)  -- D10 damage
    elseif spellTurn == 2 then
        weaponDamage = math.random(1, 12)  -- D12 damage, guaranteed hit
        roll = 100  -- Guaranteed hit
    elseif spellTurn == 3 then
        weaponDamage = math.random(1, 12) + 5  -- D12 + 5 damage
    elseif spellTurn == 4 then
        weaponDamage = math.random(1, 20) + 5  -- D20 + 5 damage, target is stunned
        print("Target is stunned!")
    elseif spellTurn == 5 then
        weaponDamage = math.random(1, 30) + 5  -- D30 + 5 damage
    elseif spellTurn == 6 then
        weaponDamage = math.random(1, 30) + 10  -- D30 + 10 damage, hits nearby targets
        print("Hits nearby targets!")
    elseif spellTurn == 7 then
        weaponDamage = math.random(1, 30) + 20  -- D30 + 20 damage
    elseif spellTurn == 8 then
        weaponDamage = 60  -- Maximum damage
    elseif spellTurn == 9 then
        weaponDamage = 75  -- 75 damage
    elseif spellTurn == 10 then
        weaponDamage = 90  -- 90 damage, guaranteed critical hit
        roll = 100  -- Guaranteed critical hit
    end

    local totalDamage = roll + weaponDamage + characterSheet.offensiveAbilities.battleMagic
    local isCritical = roll >= 95 or spellTurn == 10
    if isCritical then
        print("Magic Attack Roll on " .. target .. ": " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Magic Attack Roll on " .. target .. ": " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment the spell turn for the next attack
    characterSheet.activeSpells.turn = spellTurn + 1
    return roll, totalDamage
end

    local totalDamage = roll + weaponDamage + characterSheet.offensiveAbilities.battleMagic
    local isCritical = roll >= 95 or spellTurn == 10
    if isCritical then
        print("Magic Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Magic Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment the spell turn for the next attack
    characterSheet.activeSpells.turn = spellTurn + 1
    return roll, totalDamage
end

    local totalDamage = roll + weaponDamage + characterSheet.offensiveAbilities.battleMagic
    local isCritical = roll >= 95 or spellTurn == 10
    if isCritical then
        print("Magic Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Magic Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment the spell turn for the next attack
    characterSheet.activeSpells.turn = spellTurn + 1
    return roll, totalDamage
end
    return roll, totalDamage
end

-- Function to perform a ranged attack roll
function CombatHandler:PerformRangedAttack(characterSheet)
    local target = characterSheet.selectedTarget or "Unknown Target"
    local roll = math.random(1, 100) + characterSheet.offensiveAbilities.rangedCombat
    local weaponDamage = 0

    -- Determine weapon damage based on selected ranged weapon type
    if characterSheet.rangedWeaponType == "CrossBow" then
        weaponDamage = math.random(1, 8)  -- D8 for CrossBow
    elseif characterSheet.rangedWeaponType == "Rifle" then
        weaponDamage = math.random(1, 10)  -- D10 for Rifle
    end

    -- Sniper rules: apply bonuses if turns are spent preparing the shot
    local sniperTurn = characterSheet.sniperTurnCounter or 0
    if sniperTurn == 2 then
        weaponDamage = math.random(1, 10)  -- D10 damage, guaranteed hit
        roll = 100  -- Guaranteed hit
    elseif sniperTurn == 3 then
        weaponDamage = math.random(1, 12)  -- D12 damage, target is stunned
        print("Target is stunned!")
    elseif sniperTurn == 4 then
        weaponDamage = 12  -- Maximum damage
    elseif sniperTurn == 5 then
        weaponDamage = 16  -- Guaranteed critical hit
        roll = 100  -- Guaranteed critical hit
    end

    local totalDamage = roll + weaponDamage + characterSheet.offensiveAbilities.rangedCombat
    local isCritical = roll >= 95 or sniperTurn == 5
    if isCritical then
        print("Ranged Attack Roll on " .. target .. ": " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Ranged Attack Roll on " .. target .. ": " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment sniper turn counter
    characterSheet.sniperTurnCounter = sniperTurn + 1
    return roll, totalDamage
end

    -- Sniper rules: apply bonuses if turns are spent preparing the shot
    local sniperTurn = characterSheet.sniperTurnCounter or 0
    if sniperTurn == 2 then
        weaponDamage = math.random(1, 10)  -- D10 damage, guaranteed hit
        roll = 100  -- Guaranteed hit
    elseif sniperTurn == 3 then
        weaponDamage = math.random(1, 12)  -- D12 damage, target is stunned
        print("Target is stunned!")
    elseif sniperTurn == 4 then
        weaponDamage = 12  -- Maximum damage
    elseif sniperTurn == 5 then
        weaponDamage = 16  -- Guaranteed critical hit
        roll = 100  -- Guaranteed critical hit
    end

    local totalDamage = roll + weaponDamage + characterSheet.offensiveAbilities.rangedCombat
    local isCritical = roll >= 95 or sniperTurn == 5
    if isCritical then
        print("Ranged Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Ranged Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment sniper turn counter
    characterSheet.sniperTurnCounter = sniperTurn + 1
    return roll, totalDamage
end

    -- Sniper rules: apply bonuses if turns are spent preparing the shot
    local sniperTurn = characterSheet.sniperTurnCounter or 0
    if sniperTurn == 2 then
        weaponDamage = weaponDamage + 10  -- Guaranteed hit
        roll = 100
    elseif sniperTurn == 3 then
        weaponDamage = 12  -- D12 damage, target is stunned
        print("Target is stunned!")
    elseif sniperTurn == 4 then
        weaponDamage = 12  -- Maximum damage
    elseif sniperTurn == 5 then
        weaponDamage = 16  -- Guaranteed critical hit
        roll = 100
    end

    local totalDamage = math.random(1, weaponDamage) + characterSheet.offensiveAbilities.rangedCombat
    local isCritical = roll >= 95 or sniperTurn == 5
    if isCritical then
        print("Ranged Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Ranged Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end

    -- Increment sniper turn counter
    characterSheet.sniperTurnCounter = sniperTurn + 1
    return roll, totalDamage
end

    local totalDamage = math.random(1, weaponDamage) + characterSheet.offensiveAbilities.rangedCombat
    local isCritical = roll >= 95
    if isCritical then
        print("Ranged Attack Roll: " .. roll .. " (CRITICAL HIT!)")
        totalDamage = totalDamage + weaponDamage  -- Add full dice roll for critical hit
        print("Critical Damage: " .. totalDamage)
    else
        print("Ranged Attack Roll: " .. roll .. " (Damage: " .. totalDamage .. ")")
    end
    return roll, totalDamage
end

-- Function to perform a defense roll
function CombatHandler:PerformDefenseRoll(characterSheet, rawDamage)
    local roll = math.random(1, 100) + characterSheet.defensiveAbilities.battlefieldDefense
    local damageReduction = 0

    -- Determine damage reduction based on armor type
    if characterSheet.armorType == "Light" then
        damageReduction = 1
    elseif characterSheet.armorType == "Medium" then
        damageReduction = 2
    elseif characterSheet.armorType == "Heavy" then
        damageReduction = 3
    end

    -- If successful defense, block all damage
    if roll >= 100 then
        print("Defense Roll: " .. roll .. " (SUCCESS! All damage blocked)")
        return roll, 0  -- No damage taken
    else
        -- Reduce raw damage dealt by DM
        local mitigatedDamage = math.max(0, rawDamage - damageReduction)
        print("Defense Roll: " .. roll .. " (Mitigated Damage: " .. mitigatedDamage .. ")")
        return roll, mitigatedDamage
    end
end

-- Function to calculate proficiency based on level
function CombatHandler:CalculateProficiency(level)
    local proficiency = 1
    if level < 2 then
        proficiency = 1
    elseif level < 5 then
        proficiency = 2
    elseif level < 8 then
        proficiency = 3
    elseif level < 12 then
        proficiency = 4
    elseif level < 16 then
        proficiency = 5
    elseif level < 20 then
        proficiency = 6
    elseif level == 20 then
        proficiency = 6
    end
    return proficiency
end

-- Function to clear the selected target
function CombatHandler:ClearTarget()
    characterSheet.selectedTarget = nil
    print("Target selection cleared.")
end

-- Function to create a button for selecting raid targets
function CombatHandler:CreateRaidTargetButton(parentFrame)
    local button = CreateFrame("Button", nil, parentFrame, "GameMenuButtonTemplate")
    button:SetSize(120, 40)
    button:SetText("Select Target")
    button:SetPoint("CENTER", parentFrame, "CENTER", 0, -100)
    button:SetScript("OnClick", function()
        -- Example: prompt the player to select a target marker
        local targetMarker = "Skull"  -- Replace with user input or selection mechanism
        CombatHandler:SelectTarget(targetMarker)
    end)
    return button
end

-- Function to create a button for selecting raid targets
function CombatHandler:CreateRaidTargetButton(parentFrame)
    local button = CreateFrame("Button", nil, parentFrame, "GameMenuButtonTemplate")
    button:SetSize(120, 40)
    button:SetText("Select Target")
    button:SetPoint("CENTER", parentFrame, "CENTER", 0, -100)
    button:SetScript("OnClick", function()
        -- Example: prompt the player to select a target marker
        local targetMarker = "Skull"  -- Replace with user input or selection mechanism
        CombatHandler:SelectTarget(targetMarker)
    end)
    return button
end

-- Function to create a button for clearing the selected target
function CombatHandler:CreateClearTargetButton(parentFrame)
    local button = CreateFrame("Button", nil, parentFrame, "GameMenuButtonTemplate")
    button:SetSize(120, 40)
    button:SetText("Clear Target")
    button:SetPoint("CENTER", parentFrame, "CENTER", 0, -150)
    button:SetScript("OnClick", function()
        CombatHandler:ClearTarget()
    end)
    return button
end

-- Export CombatHandler table
return CombatHandler